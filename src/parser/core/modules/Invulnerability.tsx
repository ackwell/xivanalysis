import Module, {dependency} from '../Module'
import {Actor} from 'fflogs'
import {Timeline} from './Timeline'
import {AdditionalEvents} from './AdditionalEvents'

type InvulnActor = Actor['id'] | 'all'
type InvulnInstance = number | 'all'
type InvulnTarget = InvulnActor | [InvulnActor, InvulnInstance]
type InvulnType = 'invulnerable' | 'untargetable'

interface ActiveInvulnActorConfig {
	/**
	 * Check logic to use to calculate when an actor is targetable.
	 * Default `tau`. Use `firstTap` when no TAU events are present.
	 */
	start?: 'tau' | 'firstTap'

	/**
	 * Check logic to use to calculate when an actor is untargetable.
	 * Default `tau`. Use `overkill` when no TAU events are present.
	 */
	end?: 'tau' | 'overkill'

	/**
	 * Mirror 'untargetable' invuln windows into 'invulnerable' windows.
	 * Default `true`. Disable for actors that take damage while untargetable -
	 * you will need to add custom logic to add the invulnerable windows yourself.
	 */
	mirrorToInvuln?: boolean
}

type InvulnActorConfig =
	| {exclude: true}
	| ({exclude?: false} & ActiveInvulnActorConfig)

export type ActorsConfig = Partial<Record<Actor['guid'], InvulnActorConfig>>

interface InvulnWindow {
	type: InvulnType
	active?: boolean
	start: number
	end: number
}

export class Invulnerability extends Module {
	static handle = 'invuln'
	static debug = false

	@dependency private additionalEvents!: AdditionalEvents
	@dependency private timeline!: Timeline

	// -----
	// Public API
	// -----

	isUntargetable = (
		targetId: InvulnTarget = 'all',
		time = this.parser.currentTimestamp,
	) => false
	isInvulnerable = (
		targetId: InvulnTarget = 'all',
		time = this.parser.currentTimestamp,
	) => false

	getUntargetableUptime = (
		targetId: InvulnTarget = 'all',
		start = 0,
		end = this.parser.currentTimestamp,
	) => 0
	getInvulnerableUptime = (
		targetId: InvulnTarget = 'all',
		start = 0,
		end = this.parser.currentTimestamp,
	) => 0

	getInvulns(
		targetId: InvulnTarget = 'all',
		start?: number,
		end?: number,
		type?: InvulnType,
	) {
		return [] as InvulnWindow[]
	}
}
